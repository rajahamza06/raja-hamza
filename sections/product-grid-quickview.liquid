<section class="product-grid-quickview">
  <div class="product-grid-container">
    {% for product in collections[section.settings.collection].products %}
      <div class="product-card">
        <img 
          src="{{ product.featured_image | image_url: width: 600 }}" 
          alt="{{ product.title }}" 
          class="product-card-img"
        >
        <button class="quick-view-btn" onclick="openQuickView('{{ product.handle }}')">
          +
        </button>
      </div>
    {% endfor %}
  </div>

  <!-- Quick View Popup -->
  <div id="quick-view-popup" class="quick-view-popup">
    <div class="quick-view-content">
      <span class="close-btn" onclick="closeQuickView()">&times;</span>

      <div class="popup-inner">
        <!-- Left: Image -->
        <div class="popup-image-wrap">
          <img id="popup-image" src="" alt="">
        </div>

        <!-- Right: Details -->
        <div class="popup-details">
          <h3 id="popup-title" class="popup-title"></h3>
          <p id="popup-price" class="popup-price"></p>
          <p id="popup-description" class="popup-desc"></p>

          <!-- Color Buttons -->
          <div class="variant-group">
            <label class="variant-label">Color</label>
            <div id="popup-color-wrap" class="variant-wrap"></div>
          </div>

          <!-- Size Dropdown -->
          <div class="variant-group">
            <label class="variant-label">Size</label>
            <select id="popup-size-wrap" class="variant-dropdown">
              <option disabled selected>Choose your size</option>
            </select>
          </div>

          <!-- Add to Cart -->
          <button id="add-to-cart-btn" class="popup-add-btn">ADD TO CART â†’</button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
/* Grid */
.product-grid-quickview { padding: 40px 20px; }
.product-grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 15px;
}
.product-card { position: relative; overflow: hidden; }
.product-card-img { width: 100%; display: block; }
.quick-view-btn {
  position: absolute;
  top: 10px; right: 10px;
  background: #000; color: #fff;
  border: none; border-radius: 50%;
  width: 30px; height: 30px;
  font-size: 18px; line-height: 30px;
  cursor: pointer; transition: 0.3s;
}
.quick-view-btn:hover { background: #333; }

/* Popup Overlay */
.quick-view-popup {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  z-index: 9999;
  justify-content: center;
  align-items: center;
}
.quick-view-popup.active { display: flex; }

/* Popup Content */
.quick-view-content {
  background: #fff;
  padding: 20px;
  width: 350px;
  max-width: 90%;
  position: relative;
  animation: popupFade 0.3s ease;
}
@keyframes popupFade {
  from { opacity:0; transform: scale(0.95); }
  to { opacity:1; transform: scale(1); }
}
.close-btn {
  position: absolute;
  top: 12px; right: 12px;
  font-size: 22px; cursor: pointer;
}

/* Popup Layout */
.popup-inner { display: flex; flex-direction: column; gap: 12px; }
.popup-image-wrap img { width: 100%; margin-bottom: 12px; }
.popup-details { display: flex; flex-direction: column; gap: 6px; }
.popup-title { font-size: 16px; font-weight: 600; margin: 0; }
.popup-price { font-weight: 600; font-size: 16px; margin: 0; }
.popup-desc { font-size: 13px; line-height: 1.4; color: #333; margin-bottom: 12px; }

/* Variant Styling */
.variant-group { margin-bottom: 12px; }
.variant-label { font-size: 13px; margin-bottom: 4px; font-weight: 500; }

/* Color Buttons */
.variant-wrap { display: flex; gap: 0; }
.variant-wrap button {
  flex: 1; padding: 8px;
  border: 1px solid #000;
  background: #fff;
  cursor: pointer;
  font-size: 13px;
}
.variant-wrap button + button { border-left: none; }
.variant-wrap button.active,
.variant-wrap button:hover { background: #000; color: #fff; }

/* Size Dropdown */
.variant-dropdown {
  padding: 8px;
  border: 1px solid #000;
  width: 100%;
  font-size: 13px;
  background: #fff;
}

/* Add to Cart Button */
.popup-add-btn {
  margin-top: 10px;
  padding: 12px;
  width: 100%;
  background: #000; color: #fff;
  font-weight: bold; font-size: 13px;
  border: none; cursor: pointer;
  transition: 0.3s;
  text-transform: uppercase;
}
.popup-add-btn:hover { background: #333; }
</style>

<script>
let currentProduct = null;
let selectedColor = null;
let selectedSize = null;
let selectedVariantId = null;

async function openQuickView(handle) {
  const popup = document.getElementById('quick-view-popup');
  popup.classList.add('active');

  const res = await fetch(`/products/${handle}.js`);
  const product = await res.json();
  currentProduct = product;

  document.getElementById('popup-image').src = product.images[0];
  document.getElementById('popup-title').innerText = product.title;
  document.getElementById('popup-price').innerText = 
    (product.price / 100).toFixed(2) + ' {{ shop.currency }}';
  document.getElementById('popup-description').innerText = product.description;

  // Color buttons
  const colorWrap = document.getElementById('popup-color-wrap');
  colorWrap.innerHTML = '';
  const colorOptionIndex = product.options.findIndex(o => o.toLowerCase().includes('color'));
  if (colorOptionIndex !== -1) {
    const colors = [...new Set(product.variants.map(v => v.options[colorOptionIndex]))];
    colors.forEach(color => {
      const btn = document.createElement('button');
      btn.textContent = color;
      btn.onclick = () => selectColor(color, btn);
      colorWrap.appendChild(btn);
    });
  }

  // Size dropdown
  const sizeSelect = document.getElementById('popup-size-wrap');
  sizeSelect.innerHTML = `<option disabled selected>Choose your size</option>`;
  const sizeOptionIndex = product.options.findIndex(o => o.toLowerCase().includes('size'));
  if (sizeOptionIndex !== -1) {
    const sizes = [...new Set(product.variants.map(v => v.options[sizeOptionIndex]))];
    sizes.forEach(size => {
      const opt = document.createElement('option');
      opt.value = size;
      opt.textContent = size;
      sizeSelect.appendChild(opt);
    });
    sizeSelect.onchange = (e) => { selectedSize = e.target.value; updateVariant(); };
  } else {
    selectedVariantId = product.variants[0].id;
  }
}

function selectColor(color, btn) {
  selectedColor = color;
  document.querySelectorAll('#popup-color-wrap button').forEach(b => b.classList.remove('active'));
  btn.classList.add('active');
  updateVariant();
}

function updateVariant() {
  const match = currentProduct.variants.find(v =>
    (!selectedColor || v.options.includes(selectedColor)) &&
    (!selectedSize || v.options.includes(selectedSize))
  );
  if (match) selectedVariantId = match.id;
}

function closeQuickView() {
  document.getElementById('quick-view-popup').classList.remove('active');
}

document.getElementById('add-to-cart-btn').addEventListener('click', async () => {
  if(!selectedVariantId){
    alert('Please select all options');
    return;
  }

  await fetch('/cart/add.js', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ id: selectedVariantId, quantity: 1 })
  });

  // Auto-add Soft Winter Jacket if Black + Medium selected
  const selectedVariant = currentProduct.variants.find(v => v.id === selectedVariantId);
  if(selectedVariant && selectedVariant.title.includes('Black') && selectedVariant.title.includes('Medium')){
    const jacketHandle = 'soft-winter-jacket';
    const res = await fetch(`/products/${jacketHandle}.js`);
    const jacket = await res.json();
    await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: jacket.variants[0].id, quantity: 1 })
    });
  }

  alert('Product added to cart!');
  closeQuickView();
});
</script>

{% schema %}
{
  "name": "Product Quick View",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Choose Collection"
    }
  ],
  "presets": [
    { "name": "Product Grid with Quick View" }
  ]
}
{% endschema %}
