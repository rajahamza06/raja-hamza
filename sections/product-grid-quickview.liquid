<section class="product-grid-quickview">
  <div class="product-grid-container">
    {% if section.settings.heading != blank %}
      <h2 class="product-grid-heading" style="color: {{ section.settings.heading_color }};">
        {{ section.settings.heading }}
      </h2>
    {% endif %}
    <div class="product-grid-inner">
      {% for product in collections[section.settings.collection].products %}
        <div class="product-grid-card">
          <img
            src="{{ product.featured_image | image_url: width: 600 }}"
            alt="{{ product.title }}"
            class="product-card-img"
          >
          <button class="quick-view-btn" onclick="openQuickView('{{ product.handle }}')">+</button>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- Quick View Popup -->
  <div id="quick-view-popup" class="quick-view-popup">
    <div class="quick-view-content">
      <span class="close-btn" onclick="closeQuickView()">&times;</span>

      <div class="popup-inner">
        <!-- Left Image -->
        <div class="popup-image-wrap">
          <img id="popup-image" src="" alt="">
        </div>

        <!-- Right Details -->
        <div class="popup-details">
          <h3 id="popup-title" class="popup-title"></h3>
          <p id="popup-price" class="popup-price"></p>
          <p id="popup-description" class="popup-desc"></p>

          <div id="popup-variants"></div>

          <button id="add-to-cart-btn" class="popup-add-btn">ADD TO CART â†’</button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Product Grid */
  .product-grid-container {
     width: 100%;
      max-width: 1330px;
      margin: 0 auto;
      padding-inline: 15px;
  }
  .product-grid-inner{
      display: grid;
    grid-template-columns: repeat(auto-fill, minmax(433px, 1fr));
    gap: 20px;
  }
  .product-grid-heading{
      font-family: Lustria;
      font-weight: 400;
      font-style: Regular;
      font-size: 36px;
     line-height: 1.2;
     margin-bottom:30px;
  }
  .product-card { position: relative; overflow: hidden; }
  .product-card-img { width: 100%; display: block; }
  .quick-view-btn {
    position: absolute; top: 10px; right: 10px;
    background: #000; color: #fff;
    border: none; border-radius: 50%;
    width: 30px; height: 30px;
    font-size: 18px; line-height: 30px;
    cursor: pointer; transition: 0.3s;
  }
  .quick-view-btn:hover { background: #333; }

  /* Popup Overlay */
  .quick-view-popup {
    display: none;
    position: fixed; top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.6);
    z-index: 9999;
    justify-content: center; align-items: center;
  }
  .quick-view-popup.active { display: flex; }

  .quick-view-content {
    background: #fff;
    padding: 20px;
    width: 350px; max-width: 90%;
    position: relative;
    animation: popupFade 0.3s ease;
  }
  @keyframes popupFade {
    from { opacity:0; transform: scale(0.95); }
    to { opacity:1; transform: scale(1); }
  }
  .close-btn {
    position: absolute; top: 12px; right: 12px;
    font-size: 22px; cursor: pointer;
  }

  /* Popup Layout */
  .popup-inner { display: flex; flex-direction: column; gap: 12px; }
  .popup-image-wrap img { width: 100%; margin-bottom: 12px; }
  .popup-title { font-size: 16px; font-weight: 600; margin: 0; }
  .popup-price { font-weight: 600; font-size: 16px; margin: 0; }
  .popup-desc { font-size: 13px; line-height: 1.4; color: #333; margin-bottom: 12px; }

  /* Variant Section */
  #popup-variants { display: flex; flex-direction: column; gap: 10px; margin-bottom: 10px; }
  #popup-variants label { font-size: 13px; font-weight: 500; margin-bottom: 4px; }
  #popup-variants select {
    padding: 8px; border: 1px solid #000;
    font-size: 13px; width: 100%;
  }

  /* Add to Cart Button */
  .popup-add-btn {
    margin-top: 10px; padding: 12px; width: 100%;
    background: #000; color: #fff;
    font-weight: bold; font-size: 13px;
    border: none; cursor: pointer;
    transition: 0.3s;
    text-transform: uppercase;
  }
  .popup-add-btn:hover { background: #333; }
</style>

<script>
  let currentProduct = null;
  let selectedOptions = [];
  let selectedVariantId = null;

  // Open Quick View
  async function openQuickView(handle) {
    const popup = document.getElementById('quick-view-popup');
    popup.classList.add('active');

    const res = await fetch(`/products/${handle}.js`);
    const product = await res.json();
    currentProduct = product;
    selectedOptions = new Array(product.options.length).fill(null);

    // Fill popup
    document.getElementById('popup-image').src = product.images[0];
    document.getElementById('popup-title').innerText = product.title;
    document.getElementById('popup-price').innerText = (product.price / 100).toFixed(2) + ' {{ shop.currency }}';
    document.getElementById('popup-description').innerText = product.description;

    // Render variant selects
    const variantsContainer = document.getElementById('popup-variants');
    variantsContainer.innerHTML = '';
    product.options.forEach((option, index) => {
      const label = document.createElement('label');
      label.textContent = option;
      const select = document.createElement('select');
      select.dataset.index = index;
      select.innerHTML = `<option disabled selected>Choose ${option}</option>`;
      const values = [...new Set(product.variants.map((v) => v.options[index]))];
      values.forEach((value) => {
        select.innerHTML += `<option value="${value}">${value}</option>`;
      });
      select.addEventListener('change', (e) => {
        selectedOptions[index] = e.target.value;
        updateVariant();
      });
      variantsContainer.appendChild(label);
      variantsContainer.appendChild(select);
    });

    // Default single variant
    if (product.variants.length === 1) {
      selectedVariantId = product.variants[0].id;
    }
  }

  function updateVariant() {
    const match = currentProduct.variants.find((v) =>
      v.options.every((opt, idx) => !selectedOptions[idx] || opt === selectedOptions[idx])
    );
    if (match) selectedVariantId = match.id;
  }

  function closeQuickView() {
    document.getElementById('quick-view-popup').classList.remove('active');
  }

  // Add to cart
  document.getElementById('add-to-cart-btn').addEventListener('click', async () => {
    if (!selectedVariantId) {
      alert('Please select all options');
      return;
    }

    await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: selectedVariantId, quantity: 1 }),
    });

    window.location.href = '/cart';
  });
</script>

{% schema %}
{
  "name": "Product Quick View",
  "settings": [{ "type": "collection", "id": "collection", "label": "Choose Collection" },
  { "type": "text", "id": "heading", "label": "Heading", "default": "Tisso vison in the wild" },
    { "type": "color", "id": "heading_color", "label": "Heading Color", "default": "#000000" },],
  "presets": [{ "name": "Product Grid with Quick View" }]
}
{% endschema %}
